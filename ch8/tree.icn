class tree (id,sym,rule,nkids,tok,kids,isConst,stab,typ)
  method print(level:0)
    writes(repl(" ",level))
    if \tok then {
      write(id, "  ", tok.text, " (",tok.cat, "): ",tok.lineno)
      }
    else {
       write(id, "   ", sym, " (", rule, "): ", nkids)
       every (!kids).print(level+1)
       }
  end
  method print_graph(fw)
    if type(filename) == "string" then {
      fw := open(filename,  "w") |
        stop("can't open ", image(filename), " for writing")
      write(fw, "digraph {")
      print_graph(fw)
      write(fw, "}")
      close(fw)
    }
    else if \tok then print_leaf(fw)
    else { 
      print_branch(fw)
      every i := 1 to nkids do
        if \kids[i] then {
          write(fw, "N",id," -> N",kids[i].id,";")
          kids[i].print_graph(fw)
        } else {
          write(fw, "N",id," -> N",id,"_",j,";")
          write(fw, "N", id, "_", j,
                    " [label=\"Empty rule\"];")
          j +:= 1
        }
    }
  end
  method print_leaf(pw)
    local s := parser.yyname[tok.cat]
    print_branch(pw)
    write(pw,"N",id,
          " [shape=box style=dotted label=\" ",s," \\n ")
    write(pw,"text = ",escape(tok.text)," \\l lineno = ",
             tok.lineno," \\l\"];\n")
  end
  method print_branch(pw)
    write(pw, "N",id," [shape=box label=\"",
          pretty_print_name(),"\"];\n");
  end
  method escape(s)
    if s[1] == "\"" then
      return "\\" || s[1:-1] || "\\\""
    else return s
  end
  method pretty_print_name()
    if /tok then return sym || "#" || (rule%10)
    else return escape(tok.text) || ":" || tok.cat
  end
  method mkSymTables(curr)
    stab := curr
    case sym of {
      "ClassDecl": { curr := symtab("class",curr) }
      "MethodDecl": { curr := symtab("method",curr) }
    }
    every (!\kids).mkSymTables(curr)
  end
  method populateSymTables()
  case sym of {
    "ClassDecl": {
       stab.insert(kids[1].tok.text, , kids[1].stab) # new classtype() ?
       }
    "FieldDecl" | "LocalVarDecl" : {
       k := kids[2]
       while \k & k.sym=="VarDecls" do {
         insert_vardeclarator(k.kids[2])
         k := k.kids[1]
         }
       insert_vardeclarator(k); return
       }
    "MethodDecl": {
      stab.insert(kids[1].kids[2].kids[1].tok.text, ,kids[1].stab,
	          kids[1].kids[2].typ)
      kids[1].stab.insert("return", , , kids[1].kids[1].typ)
      }
    "FormalParm": { insert_vardeclarator(kids[2]); return }
    }
    every (!\kids).populateSymTables()
  end
  method insert_vardeclarator(vd)
   if \vd.tok then stab.insert(vd.tok.text,&null,&null,vd.typ)
   else insert_vardeclarator(vd.kids[1])
  end
  method calc_isConst()
   case sym of {
      "INTLIT" | "DOUBLELIT" | "STRINGLIT" |
      "BOOLFALSE" | "BOOLTRUE": isConst := "true"
      "UnaryExpr": isConst := \kid[2].isConst
      "RelExpr": isConst := \kid[1].isConst & \kid[3].isConst
      "CondOrExpr" | "CondAndExpr" | "EqExpr" |
      "MULEXPR"|
      "ADDEXPR": isConst := \kid[1].isConst & \kid[2].isConst
      default: isConst := &null
   }
   every (!\kids).calc_isConst()
  end
  # after symbol table population, we have enough information to fill in
  # correct class type information.
  method mkcls()
    if sym == "ClassDecl" then {
        rv := stab.lookup(kids[1].tok.text)
        flds := []; methds := []; constrs := []
        every k := key(rv.st.t) do
           if match("method ", rv.st.t[k].typ.str()) then
             put(methds, parameter(k, rv.st.t[k].typ))
           else
             put(flds, parameter(k, rv.st.t[k].typ))
        (/(rv.typ) := classtype(kids[1].tok.text, rv.st, flds, methds, constrs))
    }
    else every k := !kids do
      if k.nkids>0 then k.mkcls()
  end
  method checkSymTables()
    check_codeblocks()
  end
  # this looks for undeclareds
  method check_codeblocks()
   if sym == "MethodDecl" then { kids[2].check_block() }
   else every k := !kids do
         if k.nkids>0 then k.check_codeblocks()
  end
  method check_block()
   case sym of {
   "IDENTIFIER": {
     if not (stab.lookup(tok.text)) then
        j0.semerror("undeclared variable "||tok.text)
     }
   "FieldAccess" | "QualifiedName": kids[1].check_block()
   "MethodCall": {
      kids[1].check_block()
      if rule = 1290 then
         kids[2].check_block()
      else kids[3].check_block()
     }
   "LocalVarDecl": { } # skip
   default:  {
      every k := !\kids do {
            k.check_block()
         }
      }
   }
  end
  # calctype - synthesize the type of a variable declaration
  method calctype()
    every (!\kids).calctype()
    case sym of {
      "FieldDecl": typ := kids[1].typ
      "token": {
         if typ := \ (tok.typ) then return
         case tok.cat of {
         parser.IDENTIFIER:{
           if \ (rv := (\stab).lookup(tok.text)) then {
              if typ := \ (rv.typ) then
                 return typ
              }
           return typ := classtype(tok.text)
           }
         default:
           stop("can't grok the type of ", image(tok.text))
         }
      }
    default:
       stop("can't grok the type of ", image(sym))
    }
  end

   # check a call against a signature
   method cksig(sig)
   local i:=*sig.parameters, nactual := 1, t := kids[2]
     if /t then {
       if i ~= 0 then stop("0 parameters, expected ", i)
       }
     else {
       while t.sym == "ArgList" do { nactual +:= 1; t:=t.kids[1] }
       if nactual ~= i then
         stop(nactual, " parameters, expected ", i)
       t := kids[2]
       while t.sym == "ArgList" do {
         check_types(t.kids[-1].typ, sig.parameters[i])
         t := t.kids[1]; i-:=1
         }
       check_types(t.typ, sig.parameters[1])
     }
     typ := sig.return_type
   end

  # return a list of types corresponding to a syntax subtree parameter list
  method mksig()
     case sym of {
        "FormalParm": return [kids[1].typ]
        "FormalParmList": return kids[1].mksig() ||| kids[2].mksig()
        }
  end

  # assigntype - inherit a type, typically into a variable declaration list
  method assigntype(t)
  local parmList
    typ := t
    case sym of {
    "VarDeclarator": { # we have an ARRAY of whatever type t was
      kids[1].assigntype(arraytype(t))
      return
    }
    "MethodDeclarator": { # pass a return type into a method
       parmList := (\ (kids[2]).mksig()) | []
       kids[1].typ := typ := methodtype(parmList , t)
       return
    }
    "token": {
      case tok.cat of {
         parser.IDENTIFIER: return
         default: stop("eh? ", image(tok.cat))
      }
    }
    default:
       stop("don't know how to assign the type of ", image(sym))
    }
    every (!\kids).assigntype(t)
  end

method checkkids(in_codeblock)
    case sym of {
       # turn on in executable StmtBlock
       "MethodDecl": { kids[2].checktype(1); return }
       # turn off in LocalVarDecl list...(back on in initializers, if any)
       "LocalVarDecl": { kids[2].checktype(); return }
       "FieldAccess": { kids[1].checktype(in_codeblock);
          return }
        "QualifiedName": { # has to be a type you can . on
           kids[1].checktype(in_codeblock);
       }
       default: { every (!\kids).checktype(in_codeblock) }
       }
end

  # given a qualifiedname, return its type
  method dequalify()
  local rv, ste
    if kids[1].sym == "QualifiedName" then
      rv := kids[1].dequalify()
    else if kids[1].sym=="token" &
            kids[1].tok.cat=parser.IDENTIFIER then {
      if not \ (rv := stab.lookup(kids[1].tok.text)) then
         stop("unknown symbol ", kids[1].tok.text)
      rv := rv.typ
    }
    else stop("can't dequalify ", sym)
    if rv.basetype ~== "class" then
      stop("can't dequalify ", rv.basetype)
    if \ (ste := rv.st.lookup(kids[2].tok.text)) then
      return ste.typ
    else stop(kids[2].tok.text, " is not in ", rv.str())
end

  # checktype - check, and determine, the type of each expression
  method checktype(in_codeblock)
    if checkkids(in_codeblock) then return
    if /in_codeblock then return
    case sym of {
    "Assignment": typ := check_types(kids[1].typ, kids[3].typ)
    "AddExpr": typ := check_types(kids[1].typ, kids[2].typ)
    "ArgList"|"Block" | "BlockStmts": { typ := &null }
    "MethodCall": {
      if rule = 1290 then {
        if kids[1].sym == "QualifiedName" then {
          rv := kids[1].dequalify()
          cksig(rv)
          }
        else {
           if kids[1].sym ~== "token" then
              stop("can't check type of Name ", kids[1].sym)
           if (\ (kids[1].tok)).cat == parser.IDENTIFIER then {
              if ( \ (rv := stab.lookup(kids[1].tok.text))) then {
                 rv := rv.typ
#make sure it is actually a method
                 if not match("method ", rv.str()) then
                   stop("method expected, got ", rv.str())
                 cksig(rv)
		}
              }
           else stop("can't check the type of token ", kids[1].tok.cat)
}
           }
        else stop("Jzero does not handle complex calls")
    }
    "QualifiedName": {
       # get my type by look up kid #2 within kid #1
       if type(kids[1].typ) == "classtype__state" then {
         typ := (kids[1].typ.st.lookup(kids[2].tok.text)).typ
       } else stop("illegal type for dot operator: ",kids[1].typ.str())
      }
    "InstanceCreation": {
      if not (rv := stab.lookup(kids[1].tok.text)) then
        stop("unknown type ",kids[1].tok.text)
      if not (typ := \ (rv.typ)) then
        stop(kids[1].tok.text, " has unknown type")
    }
    "ArrayCreation": typ := arraytype(kids[1].typ)
    "ArrayAccess": {
       if match("array ", kids[1].typ.str()) then {
          if kids[2].typ.str()=="int" then
             typ := kids[1].typ.element_type
          else stop("subscripting array with ",kids[2].typ.str())
          }
       else stop("illegal subscript on type ", kids[1].typ.str())
       }
    "ReturnStmt": {
      # check the return type against the current function
      if not (rt := ( \ (stab.lookup("return")).typ)) then
         stop("stab did not find a returntype")
      if \ (kids[1].typ) then
          typ := check_types(rt, kids[1].typ)
       else { # return; check that return type is void
          if rt.str() ~== "void" then
             stop("void return from non-void method")
          typ := rt
       }
    }
    "token": typ := tok.type(stab)
    default: { stop("cannot check the type of: ", image(sym)) }
    }
  end
   method get_op()
      return case sym of {
          "ReturnStmt" : "return"
          "MethodCall" : "param"
          "Assignment" : "="
          "AddExpr": if rule=1320 then "+" else "-"
          default: fail
      }
   end

   method check_types(op1, op2)
      operator := get_op()
      case operator of {
         "param"|"return"|"="|"+"|"-" : {
            if tok := findatoken() then
               writes("line ", tok.tok.lineno, ": ")
            if op1.str() === op2.str() ===
                   ("int"|"double"|"String") then {
               write("typecheck ",operator," on a ", op1.str(),
		      " and a ", op2.str(), " -> OK")
               return op1
               }
            else if (op1.basetype===op2.basetype==="array") & operator==="=" &
                    check_types(op1.element_type,op2.element_type) then {
               write("typecheck ",operator," on a ", op1.str(),
		      " and a ", op2.str(), " -> OK")
               return op1
               }
            else if (op1.str() == op2.str()) & operator ==="=" then {
               write("typecheck ",operator," on a ", op1.str(),
		      " and a ", op2.str(), " -> OK")
               return op1
               }
            else j0.semerror("typecheck "||operator||" on a "|| op1.str()||
			     " and a "|| op2.str()|| " -> FAIL")
            }
         default: j0.semerror("don't know how to check " || image(operator))
        }
   end
  method findatoken()
    if sym==="token" then return self
    return (!kids).findatoken()
  end

initially (s,r,x[])
   id := serial.getid(); sym := s; rule := r
   if type(x[1]) == "token__state" then {
      nkids := 0; tok := x[1]
      typ := (\tok).typ
   } else {
      nkids := *x;
      kids := x
   }
end
