class tree (id,sym,rule,nkids,tok,kids)
  method print(level:0)
    writes(repl(" ",level))
    if \tok then {
      write(id, "  ", tok.text, " (",tok.cat, "): ",tok.lineno)
      }
    else {
       write(id, "  ", sym, " (", rule, "): ", nkids)
       every (!kids).print(level+1)
       }
  end
  method print_graph(fw)
    if type(fw) == "string" then {
      fw := open(fw,  "w") |
        stop("can't open ", image(fw), " for writing")
      write(fw, "digraph {")
      print_graph(fw)
      write(fw, "}")
      close(fw)
    }
    else if \tok then print_leaf(fw)
    else { 
      print_branch(fw)
      every i := 1 to nkids do
        if \kids[i] then {
          write(fw, "N",id," -> N",kids[i].id,";")
          kids[i].print_graph(fw)
        } else {
          write(fw, "N",id," -> N",id,"_",j,";")
          write(fw, "N", id, "_", j,
                    " [label=\"Empty rule\"];")
          j +:= 1
        }
    }
  end
  method print_leaf(pw)
    local s := yyname[tok.cat+1]
    print_branch(pw)
    writes(pw,"N",id,
          " [shape=box style=dotted label=\" ",s," \\n ")
    write(pw,"text = ",escape(tok.text)," \\l lineno = ",
             tok.lineno," \\l\"];\n")
  end
  method print_branch(pw)
    writes(pw, "N",id," [shape=box label=\"",
          pretty_print_name());
    if \tok then writes(pw, " id ", tok.id)
    write(pw, "\"];");
  end
  method escape(s)
    if s[1] == "\"" then
      return "\\" || s[1:-1] || "\\\""
    else return s
  end
  method pretty_print_name()
    if /tok then return sym || "#" || (rule%10)
    else return escape(tok.text) || ":" || tok.cat
  end

initially (s,r,x[])
   id := serial.getid(); sym := s; rule := r
   if type(x[1]) == "token__state" then {
      nkids := 0; tok := x[1]
   } else {
      nkids := *x
      kids := x
   }
end
